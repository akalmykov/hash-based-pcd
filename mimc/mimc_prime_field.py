# coding: utf-8
import math
import secrets

import galois

n = 129
GF = galois.GF(4787605948707450321761805915146316350821882368518086721537)

# Pre-computed round constants as integers (taken from the original SageMath script).
constants_int = [
    0x000000000000000000000000000000000,
    0x06382246D63A75DB1F522FA4E05CC0657,
    0x1081B8FFC1F376F1D8B798232E330ED56,
    0x0CE5D22BD8F8D1D3B262296B92F588787,
    0x1A426AA322E6B4DA51F9DBA2BB404DF1C,
    0x03C6946A088909908BC4471593028E7FB,
    0x11C2EDF7C3929DA2A3A9F3B3B1FC8EB53,
    0x10B0157C0FA825D7E9965ACE273294881,
    0x0AF67AC1897FF10C25501933D6C930E94,
    0x00BBBC3C4BBD5A54A0E66D9F0F8A8BE79,
    0x0CDD6A5BE343BEC16D6183F7BADD6D5DB,
    0x08B843AF944F96E199C9DAC93A8AF2888,
    0x18EA7BD63B43D8C85512B7669D9927518,
    0x16D13F69CFF104E013754C2FE96F5CB92,
    0x168AA09F0672C5E465461AECDD6684B6A,
    0x1FE480707DCA72BFCCB1A77CD4EDB67A6,
    0x015CEE01DACF5C9E66FE6BDFA93189454,
    0x16C891BC68270F24998606CFBDCAA5611,
    0x0CF4FD57AD35BF06D242A9FCB4972075B,
    0x1170A49DB9A62896C1B59840E33FF427D,
    0x0D675BD0083F069681057099A88261932,
    0x1E35E81A5F3B88568CD18456936BE6721,
    0x078A0AC6891B377B855F7E715144133B8,
    0x1664154B3DE279C0D7FC6DD5C1EC4ADA8,
    0x01860E08D1D0CCEB6E0D068D753AFB5B8,
    0x0DDBC94E9E569546044A616AB8F462FE8,
    0x06A5AE6C7C22904E4BAF44848294F82C9,
    0x05ADF151652A16F0E3546A701953DE05B,
    0x1590219323779A7756933E1D43B092865,
    0x0F09EA94A42CF3D8182EC81FE19B4A16B,
    0x14A00ADFAA82483DB455CED5B42588C23,
    0x0F9B2C70CABEA07F738F6C4C2FDF05271,
    0x177D81B15626B3D9705A84BA498BED335,
    0x010E37AD1A843D68C93BD4D12A5FF777E,
    0x1EC5252E4CE05E567C0ED58E392F82DF9,
    0x0C51762CDB2A41B86FADCA23ADE46EC3C,
    0x1BD09CBC69B6AA86C79D4B56E06C65DBF,
    0x0472CF4DF04D10A8764DCE39C758AC89F,
    0x0FA41F59A323DFFDC05BDCA384BA65007,
    0x1056526AA50107101EB34D698DBB1507B,
    0x10F3E7E57D9451BB1C36A7DB077D623B2,
    0x0C843A8A873AA33444962D64B243CA1F1,
    0x1A06A6D9E59A6F17F829845829FCC51A5,
    0x078D4F7FA105E1F396B2BDEC55D07E96A,
    0x1336A5EB8A15D2AE237E6605B4A4D5E7E,
    0x084BD7DDFC3F58851E405EEE24B31E0DA,
    0x196F9C6845D9ABC8B17815E4EFE43EA61,
    0x17E060968262D38D5B12BE87B0DDCA0FE,
    0x13E5CA95C7826B284615893FB6B6615F2,
    0x11AAFE1DEF56E71FCF9FFD1F535472262,
    0x0538E78611F47E30797CBFA5EB217D9FD,
    0x1ADB78502384A7A093D4CB5423EB98DFE,
    0x03F564C552C72F1F615660913F31AE19E,
    0x05383AEC281ADD2A5E61FC16E0915E9AB,
    0x17B7D2F156B797BA3BCD04F74970A3698,
    0x16BCB475655EECE3A2F8DECD844F65550,
    0x0DF93054F75B723AC4E2CE48D00CF37DD,
    0x190B65B81EF953C92AD0B5A15C533824C,
    0x026E03D771818ACFAD02DD38D3D5AD6D7,
    0x088946EE4840404BF1FE6EF874751680F,
    0x1A2164A4A31C13D1A0FE4D86B8A5A8F0C,
    0x0C7B325E4AECB36F489A24A31277C18AC,
    0x1A1B145F688B87D5E5926BD19D70858F5,
    0x166976D9031782C3A733897C19EADF660,
    0x0CB0DE4A36207611A580A97D94A99708E,
    0x0453B6E0F8FB6B59D38B466B9B4210B4E,
    0x13BBDD7CDA3D39A2BC6391929699B1D02,
    0x05449506BB6FA430FF999D13EF9187631,
    0x152C672A79FB3A4DE06BF22E9F8A6F7DD,
    0x09CF98E8DB80E7EC38C662CF0BD84DD49,
    0x07C42B47224719B2E7D6416E7AECE843D,
    0x18D14C8C96531EE939835090C92A79A08,
    0x189AC9A8952DAFA06B3FAD1ABE9CF37A8,
    0x0B382A9F685108884C841CFCDD4E7C065,
    0x0263C639FAE4BEE461BC66BE8FED407F7,
    0x118BBB5A626F4130A3246BF144DDEBA6F,
    0x11C7F739620FC72BA7112461FB96BCEF2,
    0x1CE202833557D1E76AF8A03CF4E1FCCF7,
    0x0A474673A25C26E1C18AEAB2015ADDA20,
    0x15C9722C814B888297FCC8C2A096A8730,
    0x1DE01E75FA74625E8F0D8231A510C88DC,
    0x12057179D8D7584FCDFB1C7302988550A,
]

# Convert constants to field elements.
constants = [GF(c) for c in constants_int]


def mimc_encryption(p: GF, k: GF, num_rounds: int) -> GF:
    """Encrypts a single block using the MiMC cipher in GF(2^129).

    Parameters
    ----------
    p : GF
        Plaintext element.
    k : GF
        Key element.
    num_rounds : int
        Number of MiMC rounds to apply.

    Returns
    -------
    GF
        The ciphertext element.
    """
    state = (p + (k + constants[0])) ** 3
    for i in range(1, num_rounds):
        state = (state + (k + constants[i])) ** 3
    state = state + k
    return state


# Determine the number of rounds suggested by the MiMC security analysis.
num_rounds = int(math.ceil(n / math.log2(3)))
print(f"Number of rounds: {num_rounds}")

# Secret key (chosen arbitrarily for this demonstration).
key_int = 0x42424242424242424242424242424242
k = GF(key_int)
print(f"Key: {hex(int(k))}")

# Random plaintext.
# The galois library provides a Random() method for field elements.
p = GF(0x123123123123)

# Encrypt.
c = mimc_encryption(p, k, num_rounds)

print(f"Plaintext: {hex(int(p))}")
print(f"Ciphertext: {hex(int(c))}")
