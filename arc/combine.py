import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import galois
from typing import List

from stir.constants import FIELD192


def combine(f_i: List[galois.Poly], shift, x):
    GF = type(shift)
    d = [len(f) - 1 for f in f_i]
    m = len(f_i)
    d_max = max(d)
    gf1 = GF(1)
    r = [gf1]
    r.extend(
        [shift ** (i - gf1 + sum(d_max - d[j] for j in range(i))) for i in range(1, m)]
    )
    if x * shift == gf1:
        return sum((r[i] * f_i[i](x) * (d_max - d[i] + 1) for i in range(m)), GF(0))
    else:
        print("gf1:", gf1)
        print("x:", x)
        print("shift:", shift)
        print(
            "(x * shift) ** (d_max - d[0] + 1):",
            gf1 - (x * shift) ** (d_max - d[0] + 1),
        )
        return sum(
            (
                r[i]
                * f_i[i](x)
                * (gf1 - (x * shift) ** (d_max - d[i] + 1))
                / (gf1 - x * shift)
                for i in range(m)
            ),
            GF(0),
        )


if __name__ == "__main__":

    GF = galois.GF(FIELD192)
    shifting_param = GF(1007323733327566925977802525272746789881681724570347277687)

    quotient_polynomial_coeffs = GF(
        [
            4218049094761553518732536143300315101489200739803702341314,
            93045571841756215983828045276416067955932139973787128730,
            3931572506928333147707334116850304227350601133919622837517,
            2302011401486416799828542779390715567467363071877097757088,
            4013606958079736059529626640632264360034674161690788784022,
            2073574676082773868334776936182488017807711809872503346485,
            652425328884378979734640266269506376046136651905831649692,
            238409652158128721219962224693037018251017776728183103244,
            336801831406759694356452555257924951367193656273001418796,
            3056428857095698298455622983524670378202803671587554657638,
            4742677420211442300834016386380747835052042827507518354807,
            647459202970859740782562718068567004964316371944373765946,
        ]
    )
    quotient_polynomial = galois.Poly(quotient_polynomial_coeffs, field=GF, order="asc")
    scaling_poly_coeffs = [
        1,
        1007323733327566925977802525272746789881681724570347277687,
        924293258557998274223546696639165014523611238711451560012,
        2259775793563478364463843705895554215856826144473998594487,
        3874180436392786417455302278897229714373561101497949084965,
        4444537461333166054743949458522197906643138064113908709223,
        1205764802613462946531005025121998639764349361881456294371,
        3846756859635439293679475095438417585069986593561599251214,
        4547212596696620639885360911228238900593431084660700330822,
        4648475053633438915468846424165332285462859761529847992496,
        545757511738291914346489333790133591463702515513579090300,
        2783294469360039963138485499261105765586818501793223420741,
        2440800227959971997362916625885708097462395872499151542450,
        2315253712430447245710550177260249097156529254285925648846,
        3218985471151454677757570902206811384486472238359708709719,
        1445474878194007180668021819410573209101946876634171557392,
        4292993442407853346814301268822401055183673995097319145528,
        2081719967200344845028047123363679623663808582359364158140,
        1946218180917966232674356124084267178748049606097016681387,
        2219027636201130310516199546632894380923319371280368593197,
        1670506168181142335374787793027757232642253529773451068734,
        2692341371533394706134562382713568391627473939570619529901,
        64069245989929682114673835513803607299232706891254843001,
        2361219296940068444295174606705145613538729601868272844929,
        1849535861782571588165515659440197793266406779289146498512,
        2619125963164535308218120981894231986841639110981613592952,
        2245102504513429646740555222686907490267748863175477801059,
        2812423663307017454274695197339939368294444139975404201184,
        371902958022708313389560699601068646521395539040622173985,
        2546806129319250348180434180979510810678633096813284080214,
        4225799591677509015578173992794954879285057467991166200368,
        4487545857396429172370736109532432163375663418460717328457,
        4572108948809819509730933133390928400999575145791663942095,
        116855454574564639388210034962399896269244644065739528841,
        1201656072580023250225486043155448689279524642643388705034,
        4625635327655696766123677023396079925541145139700654365809,
        4192804257528091023501274772060269287716829037922160795745,
        2586574197414972626292028410859588646534192824046540125780,
        1506407950402855738582930609637037304137398970773914838461,
        28139930172605287794507339252691393975802439650334845500,
        4562588042656008219096642842494156726320698238650521541746,
        3384403298986790111622582956852614436894834900809892934693,
        1666347474641457067869028851838906076566846778865125421663,
        4574575483568613017277290185619602193300396562570614839393,
        3059886687928896193315243561579309378639051351323182454223,
        3165693868087616974845340476052214521761039374583168884969,
        2359397026881578944910803298244302480262729420259208739227,
        1603625175939063800172068332756329730936121043712354828500,
        1626090338384984462598169240236745247308303223515382385383,
        4323484409952779727000427986545522546493471095149235721112,
        191351033768504084238897337310864518392657567814127467300,
        4560458006775067979404393498920901287672911260178359273958,
        1215430490765393879664967742235224116144458692567538738073,
    ]
    scaling_polynomial = galois.Poly(scaling_poly_coeffs, field=GF, order="asc")
    quotient_polynomial = quotient_polynomial * scaling_polynomial
    test_x = GF(123456789)
    combined_eval = combine([quotient_polynomial], shifting_param, test_x)
    print("combined_eval:", combined_eval)
    witness_eval = quotient_polynomial(test_x)
    print("witness_eval:", witness_eval)
    assert witness_eval == combined_eval
